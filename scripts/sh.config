# 字体颜色配置
Green="\033[32m"
Red="\033[31m"
Yellow="\033[33m"
Blue="\033[36m"
Font="\033[0m"
GreenBG="\033[42;37m"
RedBG="\033[41;37m"
WARN="${Yellow}[WARN]${Font}"
OK="${Green}[OK]${Font}"
ERROR="${Red}[ERROR]${Font}"


# 变量
IOS="ios"
ANDROID="android"
APK="apk"
IPA="ipa"
RELEASE="release"
TEST="test"


function print_ok() {
    echo -e "${OK}${Blue} $1${Font}"
}

function print_start() {
    echo -e "${Blue}>>>>$1<<<<${Font}"
}

function print_warn() {
    echo -e "${WARN}${Yellow} $1${Font}"
}

function print_error() {
    echo -e "${ERROR}${RedBG} $1${Font}"
}

# 计算字符串的实际长度
function get_string_length() {
    local length=0
    local string="$1"
    local len=${#string}
    for ((i = 0; i < len; i++)); do
        local char="${string:i:1}"
        local code=$(printf "%d" "'$char")
        if ((code >= 0 && code <= 127)); then
            ((length++))
        else
            ((length += 2))
        fi
    done
    echo "$length"
}

# 获取当前分支
get_current_branch() {

    echo ""
    print_start "检查当前分支"

    if [ "$(git rev-parse --abbrev-ref HEAD)" != "HEAD" ]; then
        branch=$(git rev-parse --abbrev-ref HEAD)
        if [ -z "$branch" ]; then
            print_error "获取当前分支失败 (branch 为空)"
            exit 1
        else
            current_branch=$branch
            print_ok "当前分支:$branch"
        fi
    else
        print_error "当前不在任何分支上"
        exit 1
    fi
}